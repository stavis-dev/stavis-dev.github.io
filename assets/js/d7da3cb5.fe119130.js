"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[8006],{4137:(e,t,n)=>{n.d(t,{Zo:()=>s,kt:()=>h});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function p(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var i=r.createContext({}),d=function(e){var t=r.useContext(i),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},s=function(e){var t=d(e.components);return r.createElement(i.Provider,{value:t},e.children)},u="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,i=e.parentName,s=p(e,["components","mdxType","originalType","parentName"]),u=d(n),m=o,h=u["".concat(i,".").concat(m)]||u[m]||c[m]||a;return n?r.createElement(h,l(l({ref:t},s),{},{components:n})):r.createElement(h,l({ref:t},s))}));function h(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,l=new Array(a);l[0]=m;var p={};for(var i in t)hasOwnProperty.call(t,i)&&(p[i]=t[i]);p.originalType=e,p[u]="string"==typeof e?e:o,l[1]=p;for(var d=2;d<a;d++)l[d]=n[d];return r.createElement.apply(null,l)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},278:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>i,contentTitle:()=>l,default:()=>c,frontMatter:()=>a,metadata:()=>p,toc:()=>d});var r=n(7462),o=(n(7294),n(4137));const a={sidebar_position:10,sidebar_label:"\u0411\u0438\u043d\u0430\u0440\u043d\u043e\u0435 \u0414\u0435\u0440\u0435\u0432\u043e (TreeNode)",title:"\u0411\u0438\u043d\u0430\u0440\u043d\u044b\u0435 \u0414\u0435\u0440\u0435\u0432\u044c\u044f (TreeNode) \u0432 python",author:"Stavis",description:"\u0421\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0430 \u0434\u0430\u043d\u043d\u044b\u0445 '\u0431\u0438\u043d\u0430\u0440\u043d\u043e\u0435 \u0434\u0435\u0440\u0435\u0432\u043e' \u0432 \u041f\u0438\u0442\u043e\u043d\u0435",tags:["python","programing","treenode","Data Structure"]},l="\u0411\u0438\u043d\u0430\u0440\u043d\u043e\u0435 \u0414\u0435\u0440\u0435\u0432\u043e",p={unversionedId:"python/types/binary-tree",id:"python/types/binary-tree",title:"\u0411\u0438\u043d\u0430\u0440\u043d\u044b\u0435 \u0414\u0435\u0440\u0435\u0432\u044c\u044f (TreeNode) \u0432 python",description:"\u0421\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0430 \u0434\u0430\u043d\u043d\u044b\u0445 '\u0431\u0438\u043d\u0430\u0440\u043d\u043e\u0435 \u0434\u0435\u0440\u0435\u0432\u043e' \u0432 \u041f\u0438\u0442\u043e\u043d\u0435",source:"@site/docs/python/types/binary-tree.md",sourceDirName:"python/types",slug:"/python/types/binary-tree",permalink:"/python/types/binary-tree",draft:!1,editUrl:"https://github.com/stavis-dev/stavis-dev.github.io/tree/main/docs/python/types/binary-tree.md",tags:[{label:"python",permalink:"/tags/python"},{label:"programing",permalink:"/tags/programing"},{label:"treenode",permalink:"/tags/treenode"},{label:"Data Structure",permalink:"/tags/data-structure"}],version:"current",lastUpdatedBy:"Stavis",lastUpdatedAt:1753572808,formattedLastUpdatedAt:"26 \u0438\u044e\u043b. 2025 \u0433.",sidebarPosition:10,frontMatter:{sidebar_position:10,sidebar_label:"\u0411\u0438\u043d\u0430\u0440\u043d\u043e\u0435 \u0414\u0435\u0440\u0435\u0432\u043e (TreeNode)",title:"\u0411\u0438\u043d\u0430\u0440\u043d\u044b\u0435 \u0414\u0435\u0440\u0435\u0432\u044c\u044f (TreeNode) \u0432 python",author:"Stavis",description:"\u0421\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0430 \u0434\u0430\u043d\u043d\u044b\u0445 '\u0431\u0438\u043d\u0430\u0440\u043d\u043e\u0435 \u0434\u0435\u0440\u0435\u0432\u043e' \u0432 \u041f\u0438\u0442\u043e\u043d\u0435",tags:["python","programing","treenode","Data Structure"]},sidebar:"pythonSidebar",previous:{title:"\u0422\u0438\u043f\u044b \u0434\u0430\u043d\u043d\u044b\u0445 Python",permalink:"/python/types/tipy-dannykh-v-python"},next:{title:"\u0421\u043b\u043e\u0432\u0430\u0440\u0438 (dict)",permalink:"/python/types/python-types-dict"}},i={},d=[{value:"\u0421\u0442\u0440\u043e\u0438\u043c \u0434\u0432\u043e\u0438\u0447\u043d\u043e\u0435 \u0434\u0435\u0440\u0435\u0432\u043e \u043d\u0430 Python",id:"\u0441\u0442\u0440\u043e\u0438\u043c-\u0434\u0432\u043e\u0438\u0447\u043d\u043e\u0435-\u0434\u0435\u0440\u0435\u0432\u043e-\u043d\u0430-python",level:2},{value:"\u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0434\u0435\u0440\u0435\u0432\u0430 \u0438\u0437 list",id:"\u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435-\u0434\u0435\u0440\u0435\u0432\u0430-\u0438\u0437-list",level:3},{value:"\u041e\u0431\u0445\u043e\u0434 \u0434\u0432\u043e\u0438\u0447\u043d\u043e\u0433\u043e \u0434\u0435\u0440\u0435\u0432\u0430",id:"\u043e\u0431\u0445\u043e\u0434-\u0434\u0432\u043e\u0438\u0447\u043d\u043e\u0433\u043e-\u0434\u0435\u0440\u0435\u0432\u0430",level:2},{value:"\u041f\u0440\u044f\u043c\u043e\u0439 \u043e\u0431\u0445\u043e\u0434 (Pre-Order)",id:"\u043f\u0440\u044f\u043c\u043e\u0439-\u043e\u0431\u0445\u043e\u0434-pre-order",level:3},{value:"\u0414\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u0441\u0441\u044b\u043b\u043a\u0438",id:"\u0434\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0435-\u0441\u0441\u044b\u043b\u043a\u0438",level:2},{value:"\u0412\u0438\u0434\u0435\u043e \u043c\u0430\u0442\u0435\u0440\u0438\u0430\u043b\u044b",id:"\u0432\u0438\u0434\u0435\u043e-\u043c\u0430\u0442\u0435\u0440\u0438\u0430\u043b\u044b",level:3},{value:"\u041f\u0440\u0438\u043c\u0435\u0440\u044b \u043d\u0430 letcode",id:"\u043f\u0440\u0438\u043c\u0435\u0440\u044b-\u043d\u0430-letcode",level:3}],s={toc:d},u="wrapper";function c(e){let{components:t,...n}=e;return(0,o.kt)(u,(0,r.Z)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"\u0431\u0438\u043d\u0430\u0440\u043d\u043e\u0435-\u0434\u0435\u0440\u0435\u0432\u043e"},"\u0411\u0438\u043d\u0430\u0440\u043d\u043e\u0435 \u0414\u0435\u0440\u0435\u0432\u043e"),(0,o.kt)("admonition",{type:"note"},(0,o.kt)("p",{parentName:"admonition"},"\u0414\u0432\u043e\u0438\u0447\u043d\u043e\u0435 \u0434\u0435\u0440\u0435\u0432\u043e \u2014 \u0434\u0440\u0435\u0432\u043e\u0432\u0438\u0434\u043d\u0430\u044f \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0430 \u0434\u0430\u043d\u043d\u044b\u0445, \u0432 \u043a\u043e\u0442\u043e\u0440\u043e\u0439 \u0443 \u0440\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0445 \u0443\u0437\u043b\u043e\u0432 \u043d\u0435 \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u0431\u043e\u043b\u044c\u0448\u0435 \u0434\u0432\u0443\u0445 \u0434\u0435\u0442\u0435\u0439.")),(0,o.kt)("p",null,(0,o.kt)("img",{parentName:"p",src:"https://lh3.googleusercontent.com/CXlnzCN4-mguzoUDwWmbg6BrgDPBs20fpa3NUob7gI6rxBVnpYs7CBcCpSEOuUotobn7AWIqY_bkiDjQi4naKNOiGdxdAG9DnnOePvNhXxuX-mp2dJPmo4rAGpZRLsIftLG-C4Db",alt:"\u0431\u0438\u043d\u0430\u0440\u043d\u043e\u0435 \u0434\u0435\u0440\u0435\u0432\u043e"})),(0,o.kt)("h2",{id:"\u0441\u0442\u0440\u043e\u0438\u043c-\u0434\u0432\u043e\u0438\u0447\u043d\u043e\u0435-\u0434\u0435\u0440\u0435\u0432\u043e-\u043d\u0430-python"},"\u0421\u0442\u0440\u043e\u0438\u043c \u0434\u0432\u043e\u0438\u0447\u043d\u043e\u0435 \u0434\u0435\u0440\u0435\u0432\u043e \u043d\u0430 Python"),(0,o.kt)("p",null,"\u041e\u043f\u0440\u0435\u0434\u0435\u043b\u0438\u043c \u043c\u0435\u0442\u043e\u0434 ",(0,o.kt)("inlineCode",{parentName:"p"},"__init__()"),". \u041a\u0430\u043a \u0432\u0441\u0435\u0433\u0434\u0430, \u043e\u043d \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u0435\u0442 ",(0,o.kt)("inlineCode",{parentName:"p"},"self"),". \u0422\u0430\u043a\u0436\u0435 \u043c\u044b \u043f\u0435\u0440\u0435\u0434\u0430\u0435\u043c \u0432 \u043d\u0435\u0433\u043e \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435, \u043a\u043e\u0442\u043e\u0440\u043e\u0435 \u0431\u0443\u0434\u0435\u0442 \u0445\u0440\u0430\u043d\u0438\u0442\u044c\u0441\u044f \u0432 \u0443\u0437\u043b\u0435.\n\u0423\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u043c \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u0443\u0437\u043b\u0430, \u0430 \u0437\u0430\u0442\u0435\u043c \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0438\u043c \u043b\u0435\u0432\u044b\u0439 \u0438 \u043f\u0440\u0430\u0432\u044b\u0439 \u0443\u043a\u0430\u0437\u0430\u0442\u0435\u043b\u044c (\u0434\u043b\u044f \u043d\u0430\u0447\u0430\u043b\u0430 \u043f\u043e\u0441\u0442\u0430\u0432\u0438\u043c \u0438\u043c \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 None)."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"class TreeNode:\n  def __init__(self, val=0, left=None, right=None):\n    self.val = val\n    self.left = left\n    self.right = right\n")),(0,o.kt)("p",null,"\u0418\u2026 \u0432\u0441\u0435! \u0415\u0441\u043b\u0438 \u0440\u0435\u0447\u044c \u0438\u0434\u0435\u0442 \u043e \u0434\u0432\u043e\u0438\u0447\u043d\u043e\u043c \u0434\u0435\u0440\u0435\u0432\u0435, \u0435\u0434\u0438\u043d\u0441\u0442\u0432\u0435\u043d\u043d\u043e\u0435, \u0447\u0442\u043e \u0435\u0433\u043e \u043e\u0442\u043b\u0438\u0447\u0430\u0435\u0442 \u043e\u0442 \u0441\u0432\u044f\u0437\u043d\u043e\u0433\u043e \u0441\u043f\u0438\u0441\u043a\u0430, \u044d\u0442\u043e \u0442\u043e, \u0447\u0442\u043e \u0432\u043c\u0435\u0441\u0442\u043e next \u0443 \u043d\u0430\u0441 \u0442\u0443\u0442 \u0435\u0441\u0442\u044c left \u0438 right."),(0,o.kt)("p",null,"\u0414\u0430\u0432\u0430\u0439\u0442\u0435 \u043f\u043e\u0441\u0442\u0440\u043e\u0438\u043c \u0434\u0435\u0440\u0435\u0432\u043e, \u043a\u043e\u0442\u043e\u0440\u043e\u0435 \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u043e \u043d\u0430 \u0441\u0445\u0435\u043c\u0435 \u0432 \u043d\u0430\u0447\u0430\u043b\u0435 \u0441\u0442\u0430\u0442\u044c\u0438.\n\u0412\u0435\u0440\u0445\u043d\u0438\u0439 \u0443\u0437\u0435\u043b \u0438\u043c\u0435\u0435\u0442 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 1. \u0414\u0430\u043b\u0435\u0435 \u043c\u044b \u0443\u0441\u0442\u0430\u043d\u0430\u0432\u043b\u0438\u0432\u0430\u0435\u043c \u043b\u0435\u0432\u044b\u0435 \u0438 \u043f\u0440\u0430\u0432\u044b\u0435 \u0443\u0437\u043b\u044b, \u043f\u043e\u043a\u0430 \u043d\u0435 \u043f\u043e\u043b\u0443\u0447\u0438\u043c \u0436\u0435\u043b\u0430\u0435\u043c\u043e\u0435 \u0434\u0435\u0440\u0435\u0432\u043e."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"tree = TreeNode(1)\ntree.left = TreeNode(2)\ntree.right = TreeNode(3)\ntree.left.left = TreeNode(4)\ntree.left.right = TreeNode(5)\n")),(0,o.kt)("h3",{id:"\u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435-\u0434\u0435\u0440\u0435\u0432\u0430-\u0438\u0437-list"},"\u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0434\u0435\u0440\u0435\u0432\u0430 \u0438\u0437 list"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"def from_list(l):\n    nodes = [TreeNode(v) for v in l]\n    kids = nodes[::-1]\n    root = kids.pop()\n    for node in nodes:\n        if node:\n            if kids:\n                node.left = kids.pop()\n            if kids:\n                node.right = kids.pop()\n    return root\n\nt = TreeNode.from_list([4,2,7,1,3,6,9])\nprint(t)\n")),(0,o.kt)("p",null,"\u0415\u0449\u0435 \u0432\u0430\u0440\u0438\u0430\u043d\u0442"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"def creatBTree(data, index):\n    pNode = None\n    if index < len(data):\n        if data[index] == None:\n            return\n        pNode = TreeNode(data[index])\n        pNode.left = creatBTree(data, 2 * index + 1) # [1, 3, 7, 15, ...]\n        pNode.right = creatBTree(data, 2 * index + 2) # [2, 5, 12, 25, ...]\n    return pNode\n\nlst = [5,4,8,11,None,13,4,7,2,None,None,None,1]\nroot = creatBTree(lst, 0)\n")),(0,o.kt)("h2",{id:"\u043e\u0431\u0445\u043e\u0434-\u0434\u0432\u043e\u0438\u0447\u043d\u043e\u0433\u043e-\u0434\u0435\u0440\u0435\u0432\u0430"},"\u041e\u0431\u0445\u043e\u0434 \u0434\u0432\u043e\u0438\u0447\u043d\u043e\u0433\u043e \u0434\u0435\u0440\u0435\u0432\u0430"),(0,o.kt)("p",null,"\u0418\u0442\u0430\u043a, \u0432\u044b \u043f\u043e\u0441\u0442\u0440\u043e\u0438\u043b\u0438 \u0434\u0435\u0440\u0435\u0432\u043e \u0438 \u0442\u0435\u043f\u0435\u0440\u044c \u0432\u0430\u043c, \u0432\u0435\u0440\u043e\u044f\u0442\u043d\u043e, \u043b\u044e\u0431\u043e\u043f\u044b\u0442\u043d\u043e, \u043a\u0430\u043a \u0436\u0435 \u0435\u0433\u043e \u0443\u0432\u0438\u0434\u0435\u0442\u044c. \u041d\u0435\u0442 \u043d\u0438\u043a\u0430\u043a\u043e\u0439 \u043a\u043e\u043c\u0430\u043d\u0434\u044b, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u043f\u043e\u0437\u0432\u043e\u043b\u0438\u043b\u0430 \u0431\u044b \u0432\u044b\u0432\u0435\u0441\u0442\u0438 \u043d\u0430 \u044d\u043a\u0440\u0430\u043d \u0434\u0435\u0440\u0435\u0432\u043e \u0446\u0435\u043b\u0438\u043a\u043e\u043c, \u0442\u0435\u043c \u043d\u0435 \u043c\u0435\u043d\u0435\u0435 \u043c\u044b \u043c\u043e\u0436\u0435\u043c \u043e\u0431\u043e\u0439\u0442\u0438 \u0435\u0433\u043e, \u043f\u043e\u0441\u0435\u0442\u0438\u0432 \u043a\u0430\u0436\u0434\u044b\u0439 \u0443\u0437\u0435\u043b. \u041d\u043e \u0432 \u043a\u0430\u043a\u043e\u043c \u043f\u043e\u0440\u044f\u0434\u043a\u0435 \u0432\u044b\u0432\u043e\u0434\u0438\u0442\u044c \u0443\u0437\u043b\u044b?"),(0,o.kt)("p",null,"\u0421\u0430\u043c\u044b\u0435 \u043f\u0440\u043e\u0441\u0442\u044b\u0435 \u0432 \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 \u043e\u0431\u0445\u043e\u0434\u044b \u0434\u0435\u0440\u0435\u0432\u0430"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"\u043f\u0440\u044f\u043c\u043e\u0439 (Pre-Order)"),(0,o.kt)("li",{parentName:"ul"},"\u043e\u0431\u0440\u0430\u0442\u043d\u044b\u0439 (Post-Order)"),(0,o.kt)("li",{parentName:"ul"},"\u0446\u0435\u043d\u0442\u0440\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0439 (In-Order)")),(0,o.kt)("p",null,"\u0412\u044b \u0442\u0430\u043a\u0436\u0435 \u043c\u043e\u0436\u0435\u0442\u0435 \u0443\u0441\u043b\u044b\u0448\u0430\u0442\u044c \u0442\u0430\u043a\u0438\u0435 \u0442\u0435\u0440\u043c\u0438\u043d\u044b, \u043a\u0430\u043a \u043f\u043e\u0438\u0441\u043a \u0432 \u0448\u0438\u0440\u0438\u043d\u0443 \u0438 \u043f\u043e\u0438\u0441\u043a \u0432 \u0433\u043b\u0443\u0431\u0438\u043d\u0443, \u043d\u043e \u0438\u0445 \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0441\u043b\u043e\u0436\u043d\u0435\u0435, \u0435\u0435 \u043c\u044b \u0440\u0430\u0441\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043a\u0430\u043a-\u043d\u0438\u0431\u0443\u0434\u044c \u043f\u043e\u0442\u043e\u043c."),(0,o.kt)("p",null,"\u0418\u0442\u0430\u043a, \u0447\u0442\u043e \u0438\u0437 \u0441\u0435\u0431\u044f \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u044f\u044e\u0442 \u0442\u0440\u0438 \u0432\u0430\u0440\u0438\u0430\u043d\u0442\u0430 \u043e\u0431\u0445\u043e\u0434\u0430, \u0443\u043a\u0430\u0437\u0430\u043d\u043d\u044b\u0435 \u0432\u044b\u0448\u0435? \u0414\u0430\u0432\u0430\u0439\u0442\u0435 \u0435\u0449\u0435 \u0440\u0430\u0437 \u043f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043d\u0430 \u043d\u0430\u0448\u0435 \u0434\u0435\u0440\u0435\u0432\u043e."),(0,o.kt)("p",null,(0,o.kt)("img",{parentName:"p",src:"https://lh3.googleusercontent.com/CXlnzCN4-mguzoUDwWmbg6BrgDPBs20fpa3NUob7gI6rxBVnpYs7CBcCpSEOuUotobn7AWIqY_bkiDjQi4naKNOiGdxdAG9DnnOePvNhXxuX-mp2dJPmo4rAGpZRLsIftLG-C4Db",alt:"\u0431\u0438\u043d\u0430\u0440\u043d\u043e\u0435 \u0434\u0435\u0440\u0435\u0432\u043e"})),(0,o.kt)("p",null,"\u041f\u0440\u0438 \u043f\u0440\u044f\u043c\u043e\u043c \u043e\u0431\u0445\u043e\u0434\u0435 \u043c\u044b \u043f\u043e\u0441\u0435\u0449\u0430\u0435\u043c \u0440\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0435 \u0443\u0437\u043b\u044b \u0434\u043e \u043f\u043e\u0441\u0435\u0449\u0435\u043d\u0438\u044f \u0443\u0437\u043b\u043e\u0432-\u043f\u043e\u0442\u043e\u043c\u043a\u043e\u0432. \u0412 \u0441\u043b\u0443\u0447\u0430\u0435 \u0441 \u043d\u0430\u0448\u0438\u043c \u0434\u0435\u0440\u0435\u0432\u043e\u043c \u043c\u044b \u0431\u0443\u0434\u0435\u043c \u043e\u0431\u0445\u043e\u0434\u0438\u0442\u044c \u0443\u0437\u043b\u044b \u0432 \u0442\u0430\u043a\u043e\u043c \u043f\u043e\u0440\u044f\u0434\u043a\u0435: 1, 2, 4, 5, 3."),(0,o.kt)("p",null,"\u041e\u0431\u0440\u0430\u0442\u043d\u044b\u0439 \u043e\u0431\u0445\u043e\u0434 \u0434\u0432\u043e\u0438\u0447\u043d\u043e\u0433\u043e \u0434\u0435\u0440\u0435\u0432\u0430 \u2014 \u044d\u0442\u043e \u043a\u043e\u0433\u0434\u0430 \u0432\u044b \u0441\u043d\u0430\u0447\u0430\u043b\u0430 \u043f\u043e\u0441\u0435\u0449\u0430\u0435\u0442\u0435 \u0443\u0437\u043b\u044b-\u043f\u043e\u0442\u043e\u043c\u043a\u0438, \u0430 \u0437\u0430\u0442\u0435\u043c \u2014 \u0438\u0445 \u0440\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0435 \u0443\u0437\u043b\u044b. \u0412 \u043d\u0430\u0448\u0435\u043c \u0441\u043b\u0443\u0447\u0430\u0435 \u043f\u043e\u0440\u044f\u0434\u043e\u043a \u043f\u043e\u0441\u0435\u0449\u0435\u043d\u0438\u044f \u0443\u0437\u043b\u043e\u0432 \u043f\u0440\u0438 \u043e\u0431\u0440\u0430\u0442\u043d\u043e\u043c \u043e\u0431\u0445\u043e\u0434\u0435 \u0431\u0443\u0434\u0435\u0442 \u0442\u0430\u043a\u0438\u043c: 4, 5, 2, 3, 1."),(0,o.kt)("p",null,"\u041f\u0440\u0438 \u0446\u0435\u043d\u0442\u0440\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u043e\u043c \u043e\u0431\u0445\u043e\u0434\u0435 \u043c\u044b \u043f\u043e\u0441\u0435\u0449\u0430\u0435\u043c \u0432\u0441\u0435 \u0443\u0437\u043b\u044b \u0441\u043b\u0435\u0432\u0430 \u043d\u0430\u043f\u0440\u0430\u0432\u043e. \u0426\u0435\u043d\u0442\u0440\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0439 \u043e\u0431\u0445\u043e\u0434 \u043d\u0430\u0448\u0435\u0433\u043e \u0434\u0435\u0440\u0435\u0432\u0430 \u2014 \u044d\u0442\u043e \u043f\u043e\u0441\u0435\u0449\u0435\u043d\u0438\u0435 \u0443\u0437\u043b\u043e\u0432 4, 2, 5, 1, 3."),(0,o.kt)("p",null,"\u0414\u0430\u0432\u0430\u0439\u0442\u0435 \u043d\u0430\u043f\u0438\u0448\u0435\u043c \u043c\u0435\u0442\u043e\u0434\u044b \u043e\u0431\u0445\u043e\u0434\u0430 \u0434\u043b\u044f \u043d\u0430\u0448\u0435\u0433\u043e \u0434\u0432\u043e\u0438\u0447\u043d\u043e\u0433\u043e \u0434\u0435\u0440\u0435\u0432\u0430."),(0,o.kt)("h3",{id:"\u043f\u0440\u044f\u043c\u043e\u0439-\u043e\u0431\u0445\u043e\u0434-pre-order"},"\u041f\u0440\u044f\u043c\u043e\u0439 \u043e\u0431\u0445\u043e\u0434 (Pre-Order)"),(0,o.kt)("p",null,"\u041d\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u043e\u0431\u0445\u043e\u0434 \u043f\u0440\u043e\u0441\u0442\u043e. \u041f\u0440\u044f\u043c\u043e\u0439 \u043e\u0431\u0445\u043e\u0434 \u2014 \u044d\u0442\u043e \u043f\u043e\u0441\u0435\u0449\u0435\u043d\u0438\u0435 \u0440\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u0441\u043a\u043e\u0433\u043e \u0443\u0437\u043b\u0430, \u0430 \u0437\u0430\u0442\u0435\u043c \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0438\u0437 \u0435\u0433\u043e \u043f\u043e\u0442\u043e\u043c\u043a\u043e\u0432.\n\u041c\u044b \xab\u043f\u043e\u0441\u0435\u0442\u0438\u043c\xbb \u0440\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0439 \u0443\u0437\u0435\u043b, \u0432\u044b\u0432\u0435\u0434\u044f \u0435\u0433\u043e \u043d\u0430 \u044d\u043a\u0440\u0430\u043d, \u0430 \u0437\u0430\u0442\u0435\u043c \xab\u043e\u0431\u043e\u0439\u0434\u0435\u043c\xbb \u0434\u0435\u0442\u0435\u0439, \u0432\u044b\u0437\u044b\u0432\u0430\u044f \u044d\u0442\u043e\u0442 \u043c\u0435\u0442\u043e\u0434 \u0440\u0435\u043a\u0443\u0440\u0441\u0438\u0432\u043d\u043e \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0443\u0437\u043b\u0430-\u043f\u043e\u0442\u043e\u043c\u043a\u0430."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"# \u0412\u044b\u0432\u043e\u0434\u0438\u0442 \u0440\u043e\u0434\u0438\u0442\u0435\u043b\u044f \u0434\u043e \u0432\u0441\u0435\u0445 \u0435\u0433\u043e \u043f\u043e\u0442\u043e\u043c\u043a\u043e\u0432\ndef pre_order(node):\n    if node:\n        print(node.value)\n        pre_order(node.left)\n        pre_order(node.right)\n")),(0,o.kt)("h2",{id:"\u0434\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0435-\u0441\u0441\u044b\u043b\u043a\u0438"},"\u0414\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u0441\u0441\u044b\u043b\u043a\u0438"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://pythonist.ru/obhod-dvoichnogo-dereva-na-python/"},"\u043e\u0440\u0438\u0433\u0438\u043d\u0430\u043b")," \u0441\u0442\u0430\u0442\u044c\u0438"),(0,o.kt)("li",{parentName:"ul"},"\u0441\u0442\u0430\u0442\u044c\u044f \u043e ",(0,o.kt)("a",{parentName:"li",href:"https://andorei.github.io/learnwithpython.ru2e/ch19.html"},"\u0434\u0435\u0440\u0435\u0432\u044c\u044f\u0445")," \u0432 \u041f\u0438\u0442\u043e\u043d\u0435")),(0,o.kt)("h3",{id:"\u0432\u0438\u0434\u0435\u043e-\u043c\u0430\u0442\u0435\u0440\u0438\u0430\u043b\u044b"},"\u0412\u0438\u0434\u0435\u043e \u043c\u0430\u0442\u0435\u0440\u0438\u0430\u043b\u044b"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://www.youtube.com/watch?v=R4UHOLZ-bEk"},"\u0417\u0430\u0434\u0430\u0447\u0430 \u0438\u0437 \u0421\u043e\u0431\u0435\u0441\u0435\u0434\u043e\u0432\u0430\u043d\u0438\u044f \u0432 Microsoft (\u0411\u0438\u043d\u0430\u0440\u043d\u044b\u0435 \u0414\u0435\u0440\u0435\u0432\u044c\u044f)"))),(0,o.kt)("h3",{id:"\u043f\u0440\u0438\u043c\u0435\u0440\u044b-\u043d\u0430-letcode"},"\u041f\u0440\u0438\u043c\u0435\u0440\u044b \u043d\u0430 letcode"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://leetcode.com/problems/binary-tree-maximum-path-sum/"},"https://leetcode.com/problems/binary-tree-maximum-path-sum/")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://leetcode.com/problems/path-sum/"},"https://leetcode.com/problems/path-sum/")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://leetcode.com/problems/invert-binary-tree/"},"https://leetcode.com/problems/invert-binary-tree/"))))}c.isMDXComponent=!0}}]);